
def process_bins(input_events_list):
        import numpy as np
        import pandas as pd
    #unit testing 

        df = pd.DataFrame.from_records(input_events_list)

        df_d = df.groupby(["dstport"],  as_index=False).sum()
        metadata = df_d.to_dict('records')
        #BPP
        df_d["bpp"] = df_d["bytes"]/df_d["packets"] 
        df_d["bpp_norm"] =  np.log(df_d['bpp'])

        df_d["bpp_zscore+log"] = (df_d["bpp_norm"] - df_d["bpp_norm"].mean()) / df_d["bpp_norm"].std()   
        
        resp = {}
        resp['metadata'] = metadata
        resp['data'] =  df_d.values.tolist()
        return resp



if(__name__ == "__main__"):
    def isValidIP(val):
        return len(str(val).split(".")) == 4

    from io import StringIO
    import csv
    
    sample_data = '''srcaddr,dstaddr,srcport,dstport,protocol,packets,bytes
52.46.138.63,172.31.40.160,443,46820,6,25,7191
172.31.40.160,52.46.138.63,46820,443,6,25,5359
172.31.40.160,52.46.138.63,46822,443,6,20,5106
52.94.233.158,172.31.40.160,443,58502,6,18,6512
172.31.40.160,52.46.128.123,39986,443,6,35,3815
172.31.40.160,52.94.233.158,58502,443,6,17,4986
52.46.128.123,172.31.40.160,443,39986,6,35,1400
52.46.138.63,172.31.40.160,443,46822,6,19,6552
172.31.40.160,52.46.138.63,46822,443,6,6,293
52.46.138.63,172.31.40.160,443,46822,6,5,599
172.31.40.160,52.94.233.158,58502,443,6,7,333
52.94.233.158,172.31.40.160,443,58502,6,7,679
52.46.148.67,172.31.40.160,443,60236,6,15,6046
172.31.40.160,52.46.148.67,60236,443,6,12,2888
172.31.40.160,52.46.148.67,60238,443,6,17,4986
52.46.148.67,172.31.40.160,443,60238,6,19,6552
209.17.96.82,172.31.45.71,47343,8080,6,8,541
172.31.45.71,209.17.96.82,8080,47343,6,6,3611
172.31.40.160,52.46.128.123,39986,443,6,60,6540
172.31.40.160,52.46.148.67,60236,443,6,8,373
52.46.128.123,172.31.40.160,443,39986,6,60,2400
52.46.148.67,172.31.40.160,443,60236,6,6,651
209.17.96.82,172.31.45.71,59242,8080,6,2,84
172.31.45.71,209.17.96.82,8080,59242,6,1,44
172.31.57.240,105.203.195.68,22,29363,6,1,48
52.46.148.67,172.31.40.160,443,60238,6,7,679
209.17.96.82,172.31.45.71,50437,8080,6,6,459
172.31.40.160,52.46.148.67,60238,443,6,7,333
105.203.195.68,172.31.57.240,29363,22,6,2,88
172.31.45.71,209.17.96.82,8080,50437,6,4,348
172.31.40.160,52.46.148.67,60240,443,6,23,5279
52.46.148.67,172.31.40.160,443,60240,6,25,7191
52.46.128.123,172.31.40.160,443,39986,6,58,2320
172.31.40.160,52.94.228.178,39840,443,6,26,5399
172.31.40.160,52.46.128.123,39986,443,6,58,6322
52.94.228.178,172.31.40.160,443,39840,6,24,7151
52.94.228.178,172.31.40.160,443,39844,6,24,7151
199.19.224.153,172.31.40.160,55172,80,6,6,339
172.31.40.160,52.94.228.178,39844,443,6,24,5319
172.31.40.160,199.19.224.153,80,55172,6,5,743
52.119.198.91,172.31.40.160,443,59966,6,20,6636
172.31.40.160,52.119.198.91,59966,443,6,18,3291
91.189.89.198,172.31.41.205,123,44646,17,1,76
172.31.41.205,91.189.89.198,44646,123,17,1,76
52.94.225.236,172.31.40.160,443,49220,6,18,6512
52.94.228.178,172.31.40.160,443,39848,6,23,7111
172.31.40.160,52.94.228.178,39848,443,6,24,5319
172.31.40.160,52.94.225.236,49220,443,6,17,4986
52.46.128.123,172.31.40.160,443,39986,6,46,1840
172.31.40.160,52.94.225.236,49220,443,6,6,293
52.94.225.236,172.31.40.160,443,49220,6,6,639
172.31.40.160,52.46.128.123,39986,443,6,46,5014
52.94.225.236,172.31.40.160,443,49222,6,24,7151
172.31.40.160,52.94.225.236,49222,443,6,23,5279
81.161.63.253,172.31.57.240,44350,22,6,6,1212
81.161.63.253,172.31.57.240,44964,22,6,7,1324
172.31.57.240,81.161.63.253,22,44964,6,8,2857
172.31.57.240,81.161.63.253,22,37398,6,2,153
81.161.63.253,172.31.57.240,37398,22,6,4,216
172.31.57.240,81.161.63.253,22,44976,6,2,153
81.161.63.253,172.31.57.240,44976,22,6,3,164
172.31.57.240,81.161.63.253,22,44350,6,5,1377
172.31.40.160,52.94.225.236,49224,443,6,25,5359
52.94.225.236,172.31.40.160,443,49224,6,25,7191
91.192.36.151,172.31.40.160,54566,22,6,12,1345
172.31.40.160,91.192.36.151,22,54566,6,12,2137
52.94.225.236,172.31.40.160,443,49226,6,24,7151
172.31.40.160,52.94.225.236,49226,443,6,24,5319
172.31.40.160,52.46.128.123,39986,443,6,25,2725
52.46.128.123,172.31.40.160,443,39986,6,25,1000
172.31.40.160,52.94.225.236,49228,443,6,24,5319
52.94.225.236,172.31.40.160,443,49228,6,24,7151
172.31.45.71,91.189.92.19,51348,443,6,12,1334
172.31.45.71,91.189.92.39,37644,443,6,11,1308
91.189.92.39,172.31.45.71,443,37644,6,10,3813
91.189.92.19,172.31.45.71,443,51348,6,10,4702
172.31.57.240,81.161.63.253,22,44350,6,1,52
81.161.63.253,172.31.57.240,44976,22,6,1,52
81.161.63.253,172.31.57.240,44350,22,6,2,104
81.161.63.253,172.31.57.240,44964,22,6,2,104
172.31.40.160,52.94.225.236,49232,443,6,18,5026
52.94.225.236,172.31.40.160,443,49230,6,24,7151
172.31.40.160,52.94.225.236,49230,443,6,24,5319
52.94.225.236,172.31.40.160,443,49232,6,18,6512
52.94.225.236,172.31.40.160,443,49232,6,6,639
172.31.40.160,45.88.109.63,22,59152,6,12,2137
172.31.40.160,52.94.225.236,49232,443,6,6,293
172.31.40.160,52.46.128.123,39986,443,6,35,3815
45.88.109.63,172.31.40.160,59152,22,6,12,1345
52.46.128.123,172.31.40.160,443,39986,6,35,1400
52.94.225.236,172.31.40.160,443,49234,6,24,7151
172.31.40.160,52.94.225.236,49234,443,6,25,5359
52.94.225.236,172.31.40.160,443,49236,6,19,6552
172.31.40.160,52.94.225.236,49236,443,6,19,5066
52.94.225.236,172.31.40.160,443,49236,6,5,599
172.31.40.160,52.94.225.236,49236,443,6,5,253
172.31.40.160,52.94.225.236,49238,443,6,19,5066
52.94.225.236,172.31.40.160,443,49238,6,19,6552
52.94.225.236,172.31.40.160,443,49238,6,5,599
172.31.40.160,52.94.225.236,49238,443,6,6,293
172.31.40.160,52.46.128.123,39986,443,6,59,6431
52.46.128.123,172.31.40.160,443,39986,6,59,2360
172.31.40.160,52.94.225.236,49240,443,6,24,5319
52.94.225.236,172.31.40.160,443,49240,6,24,7151
172.31.40.160,222.187.238.136,22,14969,6,9,6997
222.187.238.136,172.31.40.160,14969,22,6,6,2062
52.94.225.236,172.31.40.160,443,49242,6,24,7151
172.31.40.160,52.94.225.236,49242,443,6,25,5359
172.31.40.160,52.94.233.158,58544,443,6,24,5319
172.31.40.160,52.46.128.123,39986,443,6,58,6322
52.94.233.158,172.31.40.160,443,58544,6,23,7111
52.46.128.123,172.31.40.160,443,39986,6,58,2320
172.31.40.160,52.94.233.158,58548,443,6,22,5239
52.94.233.158,172.31.40.160,443,58548,6,23,7111
221.181.185.19,172.31.57.240,22635,22,6,6,2062
172.31.57.240,221.181.185.19,22,22635,6,8,5745
209.141.54.159,172.31.40.160,42276,22,6,10,1518
172.31.40.160,209.141.54.159,22,42276,6,8,1933
52.46.141.158,172.31.40.160,443,46170,6,19,6612
172.31.40.160,52.46.141.158,46170,443,6,18,3083
52.94.233.158,172.31.40.160,443,58552,6,24,7151
172.31.40.160,222.187.238.136,22,14969,6,2,2264
172.31.40.160,52.94.233.158,58552,443,6,23,5279
172.31.40.160,52.46.141.158,46174,443,6,19,3331
52.46.141.158,172.31.40.160,443,46174,6,19,6596
52.119.197.249,172.31.40.160,443,36006,6,25,7191
52.46.128.123,172.31.40.160,443,39986,6,46,1840
172.31.40.160,52.119.197.249,36006,443,6,25,5359
172.31.40.160,52.46.128.123,39986,443,6,46,5014
172.31.57.240,221.181.185.19,22,22635,6,5,4484
52.119.197.249,172.31.40.160,443,36008,6,25,7191
172.31.40.160,52.119.197.249,36008,443,6,23,5279
172.31.40.160,52.119.197.249,36010,443,6,24,5319
52.119.197.249,172.31.40.160,443,36010,6,25,7191
172.31.40.160,222.187.238.136,22,14969,6,2,1184
142.93.146.198,172.31.40.160,49969,443,6,1,40
172.31.40.160,142.93.146.198,443,49969,6,1,40
172.31.40.160,52.94.228.178,39890,443,6,23,5279
172.31.40.160,52.46.128.123,39986,443,6,26,2834
52.94.228.178,172.31.40.160,443,39890,6,24,7151
52.46.128.123,172.31.40.160,443,39986,6,26,1040
221.181.185.143,172.31.57.240,25191,22,6,6,2062
172.31.57.240,221.181.185.143,22,25191,6,13,10229
52.94.228.178,172.31.40.160,443,39894,6,18,6512
52.94.228.178,172.31.40.160,443,39892,6,24,7151
172.31.40.160,52.94.228.178,39894,443,6,18,5026
172.31.40.160,52.94.228.178,39892,443,6,25,5359
172.31.40.160,52.94.228.178,39896,443,6,12,2888
52.94.228.178,172.31.40.160,443,39894,6,7,679
172.31.40.160,52.94.228.178,39894,443,6,7,333
52.94.228.178,172.31.40.160,443,39896,6,14,6006
    '''
    func_input = []
    header = []
    f = StringIO(sample_data) #.split("")
    print(type(f))
    reader = csv.reader(f, delimiter = ',')
    for row in reader:
        if (len(header) == 0) :
            header = row
            continue
        rec = dict(zip(header, [int(r) if (isinstance(r, str)) and (len(r.strip())) and (not isValidIP(r)) else r for r in row]))

        func_input.append(rec)
    
    result = process_bins(func_input)
   
   
   
    
